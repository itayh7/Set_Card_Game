BONUS CHALLENGE FORM

--------------------



For each bonus challenge you have implemented, please replace the sentence "I'm not entitled to this bonus."

with a short description of:



1. How it was implemented in your code

2. Where it was used (in which class methods).

3. How you tested that it is working correctly.



--------------------



1. Fully supporting all configuration fields and avoiding the use of magic numbers



a)hints - in Dealer::placeCardsOnTable():

I used it to know whether to print hints for sets or not. 

I ran the program with hints = true and saw that it printed the hints as it should.



b)turnTimeoutMillis - in Dealer::placeCardsOnTable() and in Dealer::updateHints():

I used it to know in which setting I'm running the program (regular or without timer).

I checked if its value is less than or equals to zero.

and in Dealer::updateTimerDisplay(boolean reset):

I used it to update the reshuffle time according to the conditions in the bonus assignment. 



c)featureSize -  in Dealer::updateHints():

I used it for the number of cards in a set.



d)tableSize - Dealer::updateHints() and Player::createArtificialIntelligence():

I used it for the number of slots. 



e)turnTimeoutWarningMillis - in Dealer::sleepUntilWokenOrTimeout() and Dealer::updateTimerDisplay(boolean reset):

I used it to check if a warn = true and the display of the timer should be changed to what was requested. 



f)featureSize - in Player::Player: 

I used it to initialize the capacity of the waiting actions queue.



g)pointFreezeMillis - in Player::point():

I used it to update the waiting time of the player when he recieves a point. 



h)penaltyFreezeMillis - in Player::penalty():

I used it to update the waiting time of the player when he gets penalty. 



i)players - in Table::Table() and Table::removeCard(..):

I used it for the number of players in the game.

--------------------



2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.



First, I changed the value of terminate to be true in the Dealer class and called the terminate function for each of the players: for each player, 

I change its terminate value to be true. If it is ai, I interrupted the ai thread and then did the same for the player's thread. At the end I interrupted the dealer thread. 

When the terminate value is true in Dealer and Player, it finishes the "while" loops in Dealer, Player and ai threads.

I used interrupt so that if the threads were in no runnable state the exception would get them out of the loop and back to runnable state.

In player::run() I used aiThread.join() to ensure that the ai thread terminated before its player thread, and in dealer's thread I used join() for every player thread to ensure they terminate before the dealer's thread.

to check that all the threads termninated in reverse order to the order they were created in I printed the name of the thread at the moment of its termination. 

--------------------



3. Handling the config.turnTimeoutMillis value as follows:

config.turnTimeoutMillis < 0: display nothing.

config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).

Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.



I handled those conditions in Dealer::updateTimerDisplay(). I initialized reshuffleTime to be long max value so that if I didn't use the timer setting the game 

would go on without reshuffling the cards on the table. except for when there are no sets on the table, in that case I changed reshuffleTime to be 0 so that the cards

would be replaced. in the case that config.turnTimeoutMillis = 0 I used a variable called lastReshuffle that was updated each time I placed new cards on the table

which occurs after reshuffle or collecting a set. then I used elapsedTime() to display the time that had passed. 

--------------------



4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be

changed on the display, key input needs to be handled, etc.) and the only threads created by you are:

1 thread per player + 1 additional thread for non-human players.



Dealer: in method Dealer::sleepUntilWokenOrTimeout this thread is waking up only when the time needs to be updated or when a set needs to be checked.

The use of Java's BlockingQueue will put the dealer on waiting state for a maximum time of the remained time until a second has passed, and if there are no sets to check the dealer will update the time

display. If player claimed a set, his ID will be added to this queue which will notify the dealer to check it.





Player: in method Player::run I used Java's BlockingQueue so that this thread will be on wait when he tries to take an action from the waiting actions queue if this queue is empty.

If this queue gets a new slot number, it will notify the player.

Also, I put the player on wait while the dealer is checking his set until the freeze time passes, or replacing cards on the table.



AI / Input Manager: in method Player::keyPressed The BlockingQueue of the waiting actions will put this thread on wait state while this queue is full.

While the player is waiting for the dealer to let him do actions, our BlockingQueue fills up and put this thread on wait state.



In order to test this, I printed at each iteration of the while loop of Dealer, Player and AI threads to check when they are doing actions.
